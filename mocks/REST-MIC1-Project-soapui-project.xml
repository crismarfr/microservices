<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ea8f1af7-2dc1-4b15-9af4-19593eab3ad0" activeEnvironment="Default" name="REST MIC1 Project" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="efff8925-ecd1-43a7-a7a3-2231c2fdc7be" wadlVersion="http://wadl.dev.java.net/2009/02" name="Mic1Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://DESKTOP-CRIS:8089/</con:endpoint><con:endpoint>http://localhost:8083</con:endpoint></con:endpoints><con:resource name="callMicroservice" path="/api1/callMicroservice" id="515b2a9c-166c-4833-a5d8-ba65f4755009"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>status</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="callMicroservice" id="77b94b82-62f3-48e4-a77c-e945b6e5733d" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>504 404 401</con:status><con:params/><con:element xmlns:cal="http://localhost/api1/callmicroservice">cal:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cal="http://localhost/api1/callmicroservice">cal:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Authorized Request" id="4c110a10-8b03-4de1-be51-04085cfd9d9f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="OK" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8083</con:endpoint><con:request/><con:originalUri>http://localhost/api1/callMicroservice</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="OK" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder/></con:request><con:request name="NoAuthorized Request" id="7873fd4f-8127-45ea-b50d-dc175e00fa5b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8082</con:endpoint><con:request/><con:originalUri>http://localhost/api1/callMicroservice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:testSuite id="08d255a0-adab-4f53-bf27-69d55f97050f" name="Mic1Service TestSuite"><con:description>TestSuite generated for REST Service [Mic1Service]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b3361ef1-3159-4cbd-b1ae-b37dea114b5f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="callMicroservice TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [callMicroservice] located at [/api1/callMicroservice]</con:description><con:settings/><con:testStep type="restrequest" name="Authorized Request" id="9598844b-f346-42c5-b723-ee3d1ab24285"><con:settings/><con:config service="Mic1Service" resourcePath="/api1/callMicroservice" methodName="callMicroservice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="200 Request" id="4c110a10-8b03-4de1-be51-04085cfd9d9f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="OK" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8083</con:endpoint><con:request/><con:originalUri>http://localhost/api1/callMicroservice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="NoAuthorized Request" id="a026c53e-2f38-4e2f-8a8e-2fdc7f44a6be"><con:settings/><con:config service="Mic1Service" resourcePath="/api1/callMicroservice" methodName="callMicroservice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="500 Request" id="bd187820-a1b7-49e3-9f25-3b5087b4745c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8082</con:endpoint><con:request/><con:originalUri>http://localhost/api1/callMicroservice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="KO" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="87a07158-6cbc-4d18-9cd3-38bba835ca5f" port="8089" path="/" host="DESKTOP-CRIS" name="Mic1 REST MockService"><con:settings/><con:properties><con:property><con:name>version</con:name><con:value>1.0</con:value></con:property></con:properties><con:restMockAction name="/api1/callMicroservice" method="GET" resourcePath="/api1/callMicroservice" id="d68252da-f8cc-4008-874c-ce7cd791c277"><con:settings/><con:defaultResponse>NoAuthorized Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body
*/
/*
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("OK") )
{
    // return the name of the response you want to dispatch
    return "Authorized Response"
}
else if ( requestPath.contains("KO") )
{
    // return the name of the response you want to dispatch
    return "NoAuthorized Response"
}
*/


// Match based on query parameter
def queryString = mockRequest.getRequest().getHeader("Authorization")
log.info "QueryString: " + queryString

if( queryString!=null &amp;&amp; queryString == "OK" )
{
    // return the name of the response you want to dispatch
    return "Authorized Response"
}
else 
{
    // return the name of the response you want to dispatch
    return "NoAuthorized Response"
}


/*
// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("OK") )
{
    // return the name of the response you want to dispatch
    return "Authorized Response"
}
else if( queryString.contains("KO") )
{
    // return the name of the response you want to dispatch
    return "NoAuthorized Response"
}
*/






/*
// Match based on header
def AuthorizationHeaderList = mockRequest.getRequestHeaders().get("Authorization")
log.info "Authorization Header List: " + AuthorizationHeaderList

if( AuthorizationHeaderList!=null &amp;&amp; AuthorizationHeaderList.contains("Bearer") )
{
    // return the name of the response you want to dispatch
    return "Authorized Response"
}
else
{
    // return the name of the response you want to dispatch
    return "NoAuthorized Response"
}

/*
// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Authorized Response" id="8c3e3d9e-3e62-4191-b23a-a46558b349f1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"mess": "Status OK microservice1 !"}</con:responseContent></con:response><con:response name="NoAuthorized Response" id="7a7f5544-32fe-4c80-92a9-885ec7210879" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
   "error": "unauthorized",
   "error_description": "Full authentication is required to access this resource"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>Admin</con:name><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>